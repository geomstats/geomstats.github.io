{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ada6ec81",
   "metadata": {},
   "source": [
    "# Stratified spaces\n",
    "\n",
    "$\\textbf{Lead Author: Anna Calissano}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3af12b42",
   "metadata": {},
   "source": [
    "Dear lerner, \n",
    "the aim of the current notebook is to introduce stratified spaces and its implementation within geomstats. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c0d7eda",
   "metadata": {},
   "source": [
    "## Spider"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c26e954",
   "metadata": {},
   "source": [
    "The $k$-Spider consists of $k$ copies of the positive real line $\\mathbb{R}_{\\geq 0}$ glued together at the origin. Within geomstats, we defined the following:\n",
    "1. Spider Point: a point object defining the ray and the value\n",
    "2. Spider: the space defined by the number of rays\n",
    "3. Spider Geometry: by chosing a metric on the rays, we can define a metric on the whole space"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb5abd16",
   "metadata": {},
   "source": [
    "<img src=\"figures/tripod.png\" width=\"200px\"/>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72158cdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import warnings\n",
    "\n",
    "sys.path.append(os.path.dirname(os.getcwd()))\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import geomstats.backend as gs\n",
    "\n",
    "gs.random.seed(2020)\n",
    "\n",
    "from geomstats.geometry.stratified.spider import Spider, SpiderPoint, SpiderMetric\n",
    "from geomstats.geometry.euclidean import EuclideanMetric"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dc7f1cd",
   "metadata": {},
   "source": [
    "We can define a spider with $k=3$ rays (strata) and sample two points from it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85659a76",
   "metadata": {},
   "outputs": [],
   "source": [
    "sp= Spider(n_rays=3)\n",
    "sp.n_rays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "475990f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "sp_points=sp.random_point(n_samples=2)\n",
    "sp_points\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac7750b6",
   "metadata": {},
   "source": [
    "The points are represented into the SpiderPoint format, where the first input is the stratum and the second input is the value along the stratum."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f59ca8e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(sp_points[0].stratum)\n",
    "print(sp_points[0].stratum_coord)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b62044c5",
   "metadata": {},
   "source": [
    "Given a metric $d_{rays}$ on the strata (the rays), we can extend it to the whole space by $$d_{Spider}(s_1,s_2)=d_{rays}(s_1,0) + d_{rays}(0,s_2)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1037fb3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "sp_metric=SpiderMetric(ray_metric=EuclideanMetric(dim=1), space=sp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aeb317b1",
   "metadata": {},
   "source": [
    "Given two points on the Spider, we can compute the distance between the two points as well as the geodesic between the two."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6126dd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "sp_metric.dist(sp_points[0], sp_points[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7881d1da",
   "metadata": {},
   "outputs": [],
   "source": [
    "sp_geo=sp_metric.geodesic(sp_points[0], sp_points[1])\n",
    "print(sp_geo(0), sp_geo(0.5), sp_geo(1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76023d66",
   "metadata": {},
   "source": [
    "## Graph Space"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3358a89e",
   "metadata": {},
   "source": [
    "Graph Space is a space defined to describe set of graphs with a finite number of nodes which can be both node labelled or node unlabelled. \n",
    "\n",
    "Inspired by: A. Calissano, A. Feragen, S. Vantini, Populations of unlabeled networks: Graph space geometry and geodesic principal components, MOX Report (2020)\n",
    "\n",
    "\n",
    "We consider graphs as triples  $G=(V,E,a)$, where the node set $V$ has at most $n$ elements, and the edge set $E \\subset V^2$ has maximal size \n",
    "$n^2$. The nodes and edges are attributed with elements of an attribute space $A$, which is considered to be Euclidean, via an attribute \n",
    "map $a \\colon E \\rightarrow A$. Here, the map $a$ allows us to describe attributes on both edges and nodes, as we use self loop edges (diagonal \n",
    "elements in the graphs adjacency matrix) to assign attributes to nodes. \n",
    "A graph with scalar attributes is completely specified by a weighted adjacency matrix of dimension $n\\times n$, residing in a space \n",
    "$X=\\mathbb{R}^{n^2}$ of flattened adjacency matrices. If the attributes are vectors of dimension $d$, the graph is represented by a tensor of \n",
    "dimension $n\\times n\\times d$, residing in a space $X=\\mathbb{R}^{n\\times n\\times d}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8452b3d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "from geomstats.geometry.stratified.graph_space import Graph, GraphSpace, GraphSpaceMetric\n",
    "import networkx as nx\n",
    "import geomstats.backend as gs\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fa02c396",
   "metadata": {},
   "source": [
    "### Graph\n",
    "Consider a graph with $n=3$ nodes and $A=\\mathbb{R}$ scalar attributes on nodes and edges. The class Graph describe a single graph via its adjecency matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd8f3042",
   "metadata": {},
   "outputs": [],
   "source": [
    "adj= gs.array([[10,3,1],[3,2,4],[1,4,5]])\n",
    "gr=Graph(adj=adj)\n",
    "gr.adj"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0f89275b",
   "metadata": {},
   "source": [
    "To simplify the visualization and the access to different methods, the Graph object can be turned into a networkx graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edee3873",
   "metadata": {},
   "outputs": [],
   "source": [
    "gr_nx = gr.to_networkx()\n",
    "edges,weights = zip(*nx.get_edge_attributes(gr_nx,'weight').items())\n",
    "pos = nx.spring_layout(gr_nx)\n",
    "nx.draw(gr_nx, pos, node_color='b', edgelist=edges, edge_color=weights, width=5.0, edge_cmap=plt.cm.Blues)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d565bc0b",
   "metadata": {},
   "source": [
    "### Set of Graphs: GraphSpace\n",
    "Graphs can have different numbers of nodes and different node labels or order. We assume the existence across the populations of at most $n$ distinct nodes and we add fictionally null nodes to smaller networks, so that all graphs can be described by a fixed-size adjacency matrix. Graph Space is initalized by the maximal number of nodes in the set. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "050724e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "g_s = GraphSpace(n_nodes= 4)\n",
    "g_s.n_nodes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f442a08f",
   "metadata": {},
   "source": [
    "Within GraphSpace, we can sample points from random adjecency matrices, we can check if the points belongs and we can return a set of adjecency matrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5748f785",
   "metadata": {},
   "outputs": [],
   "source": [
    "gr_sampled=g_s.random_point(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "754aad18",
   "metadata": {},
   "outputs": [],
   "source": [
    "g_s.belongs(gr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7cba4c8",
   "metadata": {},
   "source": [
    "### Labelled or Unlabelled?\n",
    "Graphs can be considered labelled or unlablled, meaning that the observation in the set can share the same nodes (labelled) or not (unlabelled). We can describe both cases into Graph Space by using a little trick.\n",
    "\n",
    "To deal with unlabelled nodes, matching two graphs corresponds to finding optimal permutations of their nodes. By allowing node permutation, a concept of equivalence class is introduces (i.e., every network is associated to the set of \n",
    "networks obtained by permuting the original one). In geometrical terms, this can be described as a quotient space obtained by applying a permutation \n",
    "action to the set of adjacency matrix. \n",
    "\n",
    "In details, the group of node permutations $T$ can be represented via permutation matrices, acting on $X$ \n",
    "through matrix multiplication. The binary operation: \n",
    "\n",
    "$$\\cdot \\colon T \\times X \\rightarrow X, (T,x)\\mapsto Tx $$\n",
    "\n",
    "thus defines an action of the group $T$ on $X$. The obtained quotient space $X/T$ is called graph space, and \n",
    "each element of $X/T$ is an unlabelled graph $G$, represented as an equivalence class $[x]=Tx$ which contains all the flattened adjacency matrices \n",
    "in $X$ which can be obtained from $x$ by permuting nodes. The map $\\pi \\colon X \\to X/T$ given by $\\pi(x) = [x]$ can be thought of as a \n",
    "projection of the Euclidean total space $X$ onto the graph space $X/T$, and the total space $X$ plays a similar role relative to graph space, \n",
    "as the tangent space does for manifolds, by providing a Euclidean space in which approximate computations can be carried out and projected back onto \n",
    "the space of interest -- in our case the graph space $X/T$.\n",
    "\n",
    "\n",
    "To deal with labelled nodes, we restrict the set of permutation matrices to the identity: $T=\\{I\\}$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac7b3838",
   "metadata": {},
   "source": [
    "### Graph Space Metric\n",
    "\n",
    "To define a metric on graph space, we need to chose a metric on the total space.\n",
    "Any metric $d_X$ on $X$ defines a quotient pseudo-metric\n",
    "\n",
    "$$d_{X/T}([x_1],[x_2])=\\min_{t\\in T}d_X(x_1,t^Tx_2t)$$\n",
    "\n",
    "on $X/T$. Since the permutation group $T$ is finite, $d_{X/T}$ is a metric, and the graph space $X/T$ is a geodesic space. In the implementation, we suppose that the default metric in the total space is the Frobenious norm between adjecency matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eedec714",
   "metadata": {},
   "outputs": [],
   "source": [
    "gs_m= GraphSpaceMetric(space=g_s)\n",
    "gs_m.total_space_metric"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bea5cc08",
   "metadata": {},
   "source": [
    "### Graph Matching\n",
    "The metric on Graph Space relies on the optimization along the quotient fibers. In this context the optimization problem is known as graph matching (or graph alignment) and corresponds in finding a match between the two sents of nodes which minimize the distance between the corresponing adjecnecy matrices. The distance function needs a matcher input, which solve the minimization problem by returning an optimal permutation of the second input graph. Two matchers are called:\n",
    "\n",
    "1. 'ID' the identity matching returning the same node order which corresponds to work with labelled graphs;\n",
    "2. 'FAQ' the Fast Quadratic Assignment Matching implemented in scipy.optimize.quadratic assignment which is the state of the art in the matching literature based on the Frobenious norm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba086cd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "gs_m.dist(graph_a= gr_sampled[0], graph_b= gr_sampled[1], matcher= 'ID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f3be0a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "gs_m.dist(graph_a= gr_sampled[0], graph_b= gr_sampled[1], matcher= 'FAQ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "26f349ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "gs_m.matching(gr_sampled, gr_sampled, matcher='FAQ')"
   ]
  }
 ],
 "metadata": {
  "backends": [
   "numpy"
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
